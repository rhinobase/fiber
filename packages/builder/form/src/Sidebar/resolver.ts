import type { CanvasType } from "@fibr/providers";
import type { ThreadType } from "@fibr/react";

export function reactHookFormResolver(
  schema: Record<string, CanvasType | undefined>,
) {
  const form = Object.values(schema)[0];

  if (!form) return "";

  const capitalizedTitle = formatTitle(form.title as string);
  const blocks = Object.entries(form.blocks);

  const defaultValues = blocks
    .reduce<string[]>((prev, [name, block]) => {
      if (block?.defaultValue == null) return prev;

      const { type, defaultValue } = block;

      prev.push(
        `${name}: ${type === "number" ? `${defaultValue}` : `"${defaultValue}"`}`,
      );

      return prev;
    }, [])
    .join(`\n${" ".repeat(6)}`);

  return `// Generated by fibr ${new Date().getFullYear()}
// Check it out at https://fibr.rhinobase.io

import z from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { FieldControl, Label, InputField, Textarea, ErrorMessage, Tooltip, TooltipTrigger, TooltipContent } from "@rafty/ui";

export const schema = z.object({
  ${blocks.map(([name, field]) => generateZodSchema(name, field)).join(`\n${" ".repeat(2)}`)}
});

// Generated ${capitalizedTitle} form
export function ${capitalizedTitle}Form() {
  const {
    handleSubmit,
    register,
    formState: { errors, isSubmitting },
  } = useForm<z.infer<typeof schema>>({
    resolver: zodResolver(schema),${defaultValues ? `\n${" ".repeat(4)}${defaultValues}` : ""}
  });

  return (
    <form
      onSubmit={handleSubmit(console.log, console.error)}
      className="space-y-3"
    >
      ${blocks
        .map(([name, field]) => generateFieldComponent(name, field))
        .join(`\n${" ".repeat(6)}`)}
      <Button isLoading={isSubmitting} type="submit" colorScheme="primary">
        Submit
      </Button>
    </form>
  );
}`;
}

const formatTitle = (s: string) =>
  (s[0].toUpperCase() + s.slice(1)).replace(" ", "");

const generateZodSchema = (name: string, field?: ThreadType) => {
  const validationType = field?.type === "number" ? "number" : "string";

  return `${name}: z.${validationType}(),`;
};

const generateFieldComponent = (name: string, field?: ThreadType) => {
  if (!field) return "";

  const {
    type,
    label,
    required,
    hidden,
    disabled,
    placeholder,
    tooltip,
    description,
  } = field;

  const props = [];

  if (required) props.push("isRequired");
  if (disabled) props.push("isDisabled");
  if (hidden) props.push("hidden");
  if (tooltip) props.push(`tooltip="${tooltip}"`);

  return generateTooltip(
    `<FieldControl name="${name}"${props.length > 0 ? ` ${props.join(" ")}` : ""}>
        <Label>${label}</Label>
        ${description ? `<Text className="text-xs font-medium leading-[10px]" isMuted>${description}</Text>` : "\r"}
        <${type === "textarea" ? "Textarea" : "InputField"} {...register("${name}")}${placeholder ? ` placeholder="${placeholder}"` : ""} />
        <ErrorMessage>{errors.${name}?.message as string}</ErrorMessage>
      </FieldControl>`,
    tooltip,
  );
};

function generateTooltip(content: string, tooltip: unknown) {
  if (!tooltip) return content;

  return `<Tooltip>
    <TooltipTrigger>
      ${content}
    </TooltipTrigger>
    <TooltipContent>
      ${tooltip}
    </TooltipContent>
  </Tooltip>`;
}
